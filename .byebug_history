c
html
@newsletter
response
n
request.form_data
request
c
html
n
c
a = render 'show'
@stories.first
@stories
c
story
c
a
a.id = JSON.parse(response.body)["data"][0]["id"]
a = Story.new()
Story.new().id = JSON.parse(response.body)["data"][0]["id"]
Story.new().id = JSON.parse(response.body)["data"][0]["id
Story.new()
parsed = JSON.parse(response.body)["data"][0].id
parsed = JSON.parse(response.body)["data"][0]
parsed = JSON.parse(response.body)["data"]
parsed = JSON.parse(response.body.data)
parsed = JSON.parse(response.body)
parsed["data"][0]
parsed["data"]
parsed.data
parsed
parsed = ActiveSupport::JSON.decode(response.body)
ActiveSupport::JSON.decode(response.body)
a
a = _
ActiveSupport::JSON.decode(response.body)
ActiveSupport::JSON.decode(response)
c
response
c
@newsletter
n 
c
Date.parse('2020-11-19').strftime("%B %d, %Y")
Date.parse('2020-11-19')
new Date('2020-11-19')
params
newsletters_param
newsletters_params
params
c
@newsletter.get_stories
n
c
Story.all.select { |ele| ele.created_at.strftime("%B %d, %Y") == date } 
Story.all
@newsletter.all
n
c
@newsletter.get_stories
date
@newsletter
n
c
@newsletter.get_stories
n
c
@newsletter.get_stories
n
c
Story.find(:all).select {|i| i.created_a
Story.all
@newsletter.get_stories
@newsletter
n
mn
c
JSON.parse(response.body)["data"]["id"]
JSON.parse(response.body)["data"]
JSON.parse(response.body).data
JSON.parse(response.body)
response.json.body
response.json
response.body.json
response.body[id]
response.body.id
response.body
response.data
response
c
response.json
response
response[data]
response.data
response.data.id
response
c
response.read_body
response
c
story
story.persisted?
c
story.persisted?
story.persisted
method_override
c
@story
c
@story.persisted?
@story
n
@story
c
action
c
method_override
n
method_override
action
c
story.persisted?
story
method_override
action
c
n
story
n
@story
n
@story
n
c
nc
n
method_override
method
action
c
$(<div>a</div>)
$(<div>a</div>
$(div)
c
(Story.find(3)).nil?
(Story.find(3)) == nil
!(Story.find(3))
Story.find(3) == false
Story.find(3)
Story.where(id == params[:id])
c
n
c
n
Story.find(2)
Story.find(3)
@story
c
n
c
@story
c
@story.save
@story.exists?
@story
n
stories_param
c
params
stories_param
c
stories_param
stories.param
c
\
params
